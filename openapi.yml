openapi: 3.1.1
info:
  title: Rekapundi
  description: Rekap your pundi.
  version: 0.1.0
tags:
  - name: expenses
    description: Operations related to expenses.
  - name: incomes
    description: Operations related to incomes.
  - name: others
    description: Operations related to other functionalities.
  - name: summaries
    description: Operations related to income/expense summary.
  - name: wallets
    description: Operations related to wallets.

paths:
  /expenses:
    post:
      tags: [expenses]
      summary: Save multiple expenses.
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/SaveExpenses"
      responses:
        "201":
          description: Success.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
        "401":
          description: Unauthorized.
        "409":
          description: Some foreign key associations are invalid.
        "422":
          description: Semantic error on the request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
    get:
      tags: [expenses]
      summary: Show a list of expenses.
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          description: |
            The start date as the lower bound (inclusive) of the query.
            Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          description: |
            The end date as the higher bound (inclusive) of the query.
            Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: offset
          description: Paginate the result by an offset. Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: limit
          description: Limits the elements of the result. Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 100
      responses:
        "200":
          $ref: "#/components/responses/IndexExpenses"
        "401":
          description: Unauthorized.
  /expenses/{id}:
    delete:
      tags: [expenses]
      summary: Delete an expense record.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: ID of expense data to delete.
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        "204":
          description: Success.
        "401":
          description: Unauthorized.
        "404":
          description: Expense ID doesn't exists.
        "422":
          description: Invalid path parameter semantics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
    put:
      tags: [expenses]
      summary: Update an expense record.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: ID of expense data to update.
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        $ref: "#/components/requestBodies/UpdateExpense"
      responses:
        "204":
          description: Success.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
        "401":
          description: Unauthorized.
        "404":
          description: Expense ID doesn't exists.
        "409":
          description: Invalid foreign key association.
        "422":
          description: Semantic error on request body or path parameter.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
    get:
      tags: [expenses]
      summary: Show an expense record.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: ID of expense data to show.
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        "200":
          $ref: "#/components/responses/ShowExpense"
        "401":
          description: Unauthorized.
        "404":
          description: Expense ID doesn't exists.
        "422":
          description: Semantic error on path parameter.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
  /expenses/latest:
    get:
      tags: [expenses]
      summary: Show the latest expense record.
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/ExpenseEntity"
        "401":
          description: Unauthorized.
        "404":
          description: No expenses exist yet.

  /incomes:
    post:
      tags: [incomes]
      summary: Save multiple income records.
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/SaveIncomes"
      responses:
        "201":
          description: Success.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
        "401":
          description: Unauthorized.
        "409":
          description: Invalid foreign key association.
        "422":
          description: Semantic error on request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
    get:
      tags: [incomes]
      summary: Show a list of incomes.
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          description: |
            The start date as the lower bound (inclusive) of the query.
            Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          description: |
            The end date as the higher bound (inclusive) of the query.
            Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: offset
          description: Paginate the result by an offset. Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: limit
          description: Limits the elements of the result. Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 100
      responses:
        "200":
          $ref: "#/components/responses/IndexIncomes"
        "401":
          description: Unauthorized.
  /incomes/{id}:
    delete:
      tags: [incomes]
      summary: Delete an income record.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: ID of income data to delete.
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        "204":
          description: Success.
        "401":
          description: Unauthorized.
        "404":
          description: Income ID doesn't exists.
        "422":
          description: Invalid path parameter semantics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
    put:
      tags: [incomes]
      summary: Update an income record.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: ID of income data to update.
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      requestBody:
        $ref: "#/components/requestBodies/UpdateExpense"
      responses:
        "204":
          description: Success.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
        "401":
          description: Unauthorized.
        "404":
          description: Income ID doesn't exists.
        "409":
          description: Invalid foreign key association.
        "422":
          description: Invalid request body or path parameter semantics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
    get:
      tags: [incomes]
      summary: Show an income record.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          description: ID of income data to show.
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        "200":
          $ref: "#/components/responses/ShowIncome"
        "401":
          description: Unauthorized.
        "404":
          description: Income ID doesn't exists.
        "422":
          description: Invalid path parameter semantics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
  /incomes/latest:
    get:
      tags: [incomes]
      summary: Show the latest income record.
      security:
        - bearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/IncomeEntity"
        "401":
          description: Unauthorized.
        "404":
          description: No incomes exist yet.

  /categories:
    get:
      tags: [others]
      summary: Show a list of categories.
      security:
        - bearerAuth: []
      parameters:
        - name: offset
          description: Paginate the result by an offset. Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: limit
          description: Limits the elements of the result. Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 100
      responses:
        "200":
          $ref: "#/components/responses/IndexCategories"
        "401":
          description: Unauthorized.

  /parent-categories:
    get:
      tags: [others]
      summary: Show a list of parent categories and their childs.
      security:
        - bearerAuth: []
      parameters:
        - name: offset
          description: Paginate the result by an offset. Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: limit
          description: Limits the elements of the result. Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 100
      responses:
        "200":
          $ref: "#/components/responses/IndexParentCategories"
        "401":
          description: Unauthorized.

  /tags:
    get:
      tags: [others]
      summary: Show a list of tags.
      security:
        - bearerAuth: []
      parameters:
        - name: markImportantValue
          description: |
            Filter the records to only show `isImportant` values that match this query.
            Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: boolean
        - name: offset
          description: Paginate the result by an offset. Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: limit
          description: Limits the elements of the result. Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 100
      responses:
        "200":
          $ref: "#/components/responses/IndexTags"
        "401":
          description: Unauthorized.

  /wallets:
    get:
      tags: [wallets]
      summary: Show a list of wallets.
      security:
        - bearerAuth: []
      parameters:
        - name: offset
          description: Paginate the result by an offset. Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: limit
          description: Limits the elements of the result. Invalid value will be ignored.
          in: query
          required: false
          schema:
            type: integer
            default: 100
            minimum: 0
            maximum: 100
      responses:
        "200":
          $ref: "#/components/responses/IndexWallets"
        "401":
          description: Unauthorized.

  /summaries/generate/raw:
    post:
      tags: [summaries]
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/GenerateSummary"
      responses:
        "200":
          $ref: "#/components/responses/SummaryRaw"
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
        "401":
          description: Unauthorized.
        "422":
          description: Invalid request body semantics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
  /summaries/generate/chart:
    post:
      tags: [summaries]
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/GenerateSummaryChart"
      responses:
        "200":
          $ref: "#/components/responses/SummaryChart"
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
        "401":
          description: Unauthorized.
        "422":
          description: Invalid request body semantics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"

  /wallets/transfers:
    post:
      tags: [wallets]
      summary: Transfer money between wallets.
      security:
        - bearerAuth: []
      requestBody:
        description: |
          The transfer request body.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  description: The date of the expense.
                  type: string
                  format: date
                sourceWalletId:
                  description: The ID of the source wallet.
                  type: integer
                  minimum: 1
                targetWalletId:
                  description: The ID of the target wallet.
                  type: integer
                  minimum: 1
                amount:
                  description: The amount to transfer.
                  type: integer
                  minimum: 1
                fee:
                  description: The fee for the transfer.
                  type: integer
                  minimum: 0
                description:
                  description: Optional description for the transfer.
                  type: ["string", "null"]
                  example: Transfer to savings.
              required: [amount, date, fee, sourceWalletId, targetWalletId]
      responses:
        "201":
          description: Success.
        "400":
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"
        "401":
          description: Unauthorized.
        "409":
          description: Invalid foreign key association.
        "422":
          description: Invalid request body semantics.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClientRelatedError"

  /health:
    get:
      tags: [health]
      summary: Health check
      responses:
        "200":
          description: Healthy!

components:
  schemas:
    Entity:
      type: object
      properties:
        id:
          description: The identifier of the entity.
          type: integer
          minimum: 1
        name:
          description: The name of the entity.
          type: string
      required: [id, name]
    TagEntities:
      description: The list of tags, ordered ascendingly by the name field.
      type: array
      items:
        allOf:
          - $ref: "#/components/schemas/Entity"
          - type: object
            properties:
              isImportant:
                description: |
                  A flag indicating whether this tag holds special significance.
                  Clients can use this property to visually distinguish, prioritize, or filter important tags.
                  For example, a frequently used tag like "Gojek" could be marked important,
                  while an occasional one like "Coffee time with friends" might not be.
                type: boolean
            required: [isImportant]
    BaseExpense:
      type: object
      properties:
        amount:
          description: The amount of money spent.
          type: integer
          minimum: 0
        date:
          description: The date of the expense.
          type: string
          format: date
        description:
          description: Additional description for the expense.
          example: Daily caffeine intake.
          type: ["string", "null"]
        priority:
          description: |
            The priority scale of the expense.
            0 is the highest (primary needs), 2 is the lowest priority (tertiary needs).
          type: integer
          minimum: 0
          maximum: 2
      required: [amount, date, description, priority]
    ShowExpense:
      allOf:
        - $ref: "#/components/schemas/BaseExpense"
        - type: object
          properties:
            category:
              $ref: "#/components/schemas/Entity"
            tags:
              $ref: "#/components/schemas/TagEntities"
            wallet:
              $ref: "#/components/schemas/Entity"
          required: [category, tags, wallet]
    ExpenseEntity:
      allOf:
        - type: object
          properties:
            id:
              description: The identifier of the expense record.
              type: integer
              minimum: 1
          required: [id]
        - $ref: "#/components/schemas/ShowExpense"
    SaveExpense:
      allOf:
        - $ref: "#/components/schemas/BaseExpense"
        - type: object
          properties:
            categoryId:
              description: the category identifer to classify the expense.
              type: integer
              minimum: 1
            tagIds:
              description: |
                Optional tag identifiers. Left as an empty array if not used.
              type: array
              items:
                type: integer
                minimum: 1
            walletId:
              description: The wallet identifier of where the money is wired from.
              type: integer
              minimum: 1
          required: [categoryId, tagIds, walletId]
    SaveExpenses:
      type: object
      properties:
        expenses:
          type: array
          items:
            $ref: "#/components/schemas/SaveExpense"
      required: [expenses]
    IndexExpenses:
      type: object
      properties:
        expenses:
          description: The list of expenses that are sorted ascendingly by the ID.
          type: array
          items:
            type: object
            properties:
              id:
                description: The identifier of the expense.
                type: integer
                minimum: 1
              amount:
                description: The amount of money spent.
                type: integer
                minimum: 0
              date:
                description: The date of the expense.
                type: string
                format: date
              description:
                description: Additional description for the expense.
                example: Daily caffeine intake.
                type: ["string", "null"]
            required: [amount, date, description, id]
      required: [expenses]
    BaseIncome:
      type: object
      properties:
        amount:
          description: The amount of income.
          type: integer
          minimum: 0
        date:
          description: The date of the expense.
          type: string
          format: date
        description:
          description: Optional description of the income.
          type: ["string", "null"]
          example: Full time job salary.
      required: [amount, date, description]
    SaveIncome:
      allOf:
        - $ref: "#/components/schemas/BaseIncome"
        - type: object
          properties:
            walletId:
              description: The wallet identifier of where the income is wired to.
              type: integer
              minimum: 1
          required: [walletId]
    SaveIncomes:
      type: object
      properties:
        incomes:
          type: array
          items:
            $ref: "#/components/schemas/SaveIncome"
      required: [incomes]
    ShowIncome:
      allOf:
        - $ref: "#/components/schemas/BaseIncome"
        - type: object
          properties:
            wallet:
              $ref: "#/components/schemas/Entity"
          required: [wallet]
    IncomeEntity:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              minimum: 1
          required: [id]
        - $ref: "#/components/schemas/ShowIncome"
    IndexIncomes:
      type: object
      properties:
        incomes:
          description: The list of incomes that are sorted ascendingly by the ID.
          type: array
          items:
            allOf:
              - type: object
                properties:
                  id:
                    type: integer
                    minimum: 1
                required: [id]
              - $ref: "#/components/schemas/BaseIncome"
      required: [incomes]
    GenerateSummary:
      type: object
      properties:
        startDate:
          description: |
            The start date as the lower bound (inclusive) of the summary.
          type: string
          format: date
        endDate:
          description: |
            The start date as the higher bound (inclusive) of the summary.
          type: string
          format: date
        excludeCategoryIds:
          description: |
            The IDs of categories to exclude from the summary.
          type: array
          items:
            type: integer
      required: [startDate, endDate, excludeCategoryIds]
    GenerateSummaryChart:
      allOf:
        - $ref: "#/components/schemas/GenerateSummary"
        - type: object
          properties:
            type:
              description: The type of chart to generate.
              type: string
              example: sankey
              enum: [bar, sunburst, sankey]
          required: [type]
    Summary:
      description: The financial summary in JSON format.
      type: object
      properties:
        expense:
          type: object
          properties:
            amount:
              description: The total amount of expenses.
              type: integer
              minimum: 0
            groupSummary:
              description: |
                The summary of expenses grouped by categories and priorities.
                The categories are ordered by the amount in descending order.
              type: object
              properties:
                parentCategories:
                  description: |
                    The list of parent categories ordered by the amount in descending order.
                    Each parent category contains a list of child categories.
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        description: The name of the parent category.
                        type: string
                      amount:
                        description: The total amount of the parent category.
                        type: integer
                        minimum: 0
                      categories:
                        description: |
                          The list of child categories ordered by the amount in descending order.
                        type: array
                        items:
                          type: object
                          properties:
                            name:
                              description: The name of the child category.
                              type: string
                            amount:
                              description: The total amount of the child category.
                              type: integer
                              minimum: 0
                          required: [name, amount]
                    required: [amount, categories, name]
                priorities:
                  description: |
                    The list of priorities ordered by the amount in descending order.
                  type: array
                  items:
                    type: object
                    properties:
                      level:
                        description: |
                          The level of priority.
                          0 is the highest (primary needs), 1 is the secondary needs, 2 is the lowest priority (tertiary needs).
                        type: integer
                        minimum: 0
                        maximum: 2
                      amount:
                        description: The total amount of the priority.
                        type: integer
                        minimum: 0
                    required: [amount, level]
              required: [parentCategories, priorities]
          required: [amount, groupSummary]
        income:
          type: object
          properties:
            amount:
              description: The total amount of incomes.
              type: integer
              minimum: 0
            groupSummary:
              description: |
                The summary of incomes grouped by wallets.
                The wallets are ordered by the amount in descending order.
              type: object
              properties:
                wallets:
                  description: |
                    The list of wallets ordered by the amount in descending order.
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        description: The name of the wallet.
                        type: string
                        example: GoPay
                      amount:
                        description: The total amount of the wallet.
                        type: integer
                        minimum: 0
                    required: [amount, name]
              required: [wallets]
          required: [amount, groupSummary]
      required: [expense, income]

    ClientRelatedError:
      type: object
      properties:
        message:
          description: The error message that explains the invalid request.
          type: string
      required: [message]

  requestBodies:
    UpdateExpense:
      description: Update an expense record.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SaveExpense"
    SaveExpenses:
      description: Save multiple expenses records.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SaveExpenses"
    SaveIncomes:
      description: Save multiple incomes record.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SaveIncomes"
    GenerateSummary:
      description: The input to generate an income/expense summary.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenerateSummary"
    GenerateSummaryChart:
      description: The input to generate an income/expense summary.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenerateSummaryChart"

  responses:
    ShowExpense:
      description: The expense record.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ShowExpense"
    ExpenseEntity:
      description: The expense enity
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ExpenseEntity"
    IndexExpenses:
      description: List of expense records.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/IndexExpenses"
    ShowIncome:
      description: The income record.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ShowIncome"
    IncomeEntity:
      description: The income entity.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/IncomeEntity"
    IndexIncomes:
      description: List of income records.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/IndexIncomes"
    IndexCategories:
      description: List of categories.
      content:
        application/json:
          schema:
            type: object
            properties:
              categories:
                description: |
                  List of categories ordered by the name.
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
            required: [categories]
    IndexParentCategories:
      description: List of parent categories and their childs.
      content:
        application/json:
          schema:
            type: object
            properties:
              parentCategories:
                description: |
                  List of parent categories ordered by the name.
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Entity"
                    - type: object
                      properties:
                        categories:
                          description: List of categories ordered by the name.
                          type: array
                          items:
                            $ref: "#/components/schemas/Entity"
                      required: [categories]
            required: [parentCategories]
    IndexTags:
      description: List of tags.
      content:
        application/json:
          schema:
            type: object
            properties:
              tags:
                description: |
                  List of tags ordered by the marked important field, and name.
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/Entity"
                    - type: object
                      properties:
                        isImportant:
                          description: |
                            A flag indicating whether this tag holds special significance.
                            Clients can use this property to visually distinguish, prioritize, or filter important tags.
                          type: boolean
                      required: [isImportant]
            required: [tags]
    IndexWallets:
      description: List of wallets.
      content:
        application/json:
          schema:
            type: object
            properties:
              wallets:
                description: List of wallets ordered by the name.
                type: array
                items:
                  $ref: "#/components/schemas/Entity"
            required: [wallets]
    SummaryChart:
      description: A HTML page containing the summary visualization.
      content:
        text/html:
          schema:
            type: string
    SummaryRaw:
      description: The financial summary in JSON.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Summary"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
